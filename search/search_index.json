{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"fastcldf","text":"<p>Quickly create CLDF datasets.</p> <p> </p>"},{"location":"#fastcldf.create_cldf","title":"<code>create_cldf(tables, metadata={}, spec={'dir': './cldf', 'module': 'Generic', 'metadata_fname': 'metadata.json'})</code>","text":"<p>Creates a CLDF dataset.</p> <p>Parameters:</p> Name Type Description Default <code>tables</code> <code>dict</code> <p>A dict linking table names (\"languages\" etc.) to lists of records ([{\"id\": \"lg-1\", \"name\": \"Language 1\"} etc.]).</p> required <code>metadata</code> <p>A dict containing metadata about the dataset.</p> <code>{}</code> <code>spec</code> <code>dict</code> <p>A dict representing a cldfbench spec</p> <code>{'dir': './cldf', 'module': 'Generic', 'metadata_fname': 'metadata.json'}</code> <p>Returns:</p> Type Description <code>dataset</code> <p>A pycldf dataset</p> Source code in <code>src/fastcldf/__init__.py</code> <pre><code>def create_cldf(\n    tables,\n    metadata={},\n    spec={\n        \"dir\": \"./cldf\",\n        \"module\": \"Generic\",\n        \"metadata_fname\": \"metadata.json\",\n    },  # empty cldf specification (https://github.com/cldf/cldf/blob/master/modules/Generic/Generic-metadata.json)\n):\n    \"\"\"Creates a CLDF dataset.\n\n    Parameters\n    ----------\n    tables : dict\n      A dict linking table names (\"languages\" etc.) to lists of records ([{\"id\": \"lg-1\", \"name\": \"Language 1\"} etc.]).\n    metadata: dict\n      A dict containing metadata about the dataset.\n    spec : dict\n      A dict representing a [cldfbench](https://github.com/cldf/cldfbench) spec\n    Returns\n    -------\n    pycldf.dataset\n        A [pycldf dataset](https://pycldf.readthedocs.io/en/latest/dataset.html)\n    \"\"\"\n    with CLDFWriter(CLDFSpec(**spec)) as writer:\n        # mapping e.g. \"examples.csv\" to e.g. \"ExampleTable\", to use add_component(\"ExampleTable\") later\n        components = {}\n        cldf_data = {}\n        for component_filename in pkg_path(\n            \"components\"\n        ).iterdir():  # .../.../pycldf/components/Example-Metadata.json\n            component = load(component_filename)\n            handle = component[\"url\"].replace(\".csv\", \"\")\n            cldf_data[handle] = load(component_filename)  # {\"url\": \"examples.csv\", ...}\n            components[handle] = str(component_filename.name).replace(\n                MD_SUFFIX, \"\"\n            )  # \"examples\": Example\n        column_data = {\"general\": {}}\n        for table in components:\n            column_data[table] = {}\n            for column in cldf_data[table][\"tableSchema\"][\"columns\"]:\n                column_data[table][column[\"name\"]] = column\n                column_data[\"general\"][column[\"name\"]] = column\n        for table, data in tables.items():\n            df = pd.DataFrame.from_dict(data).fillna(\"\")\n            added_cols = {}\n            if table in components:\n                for col in df.columns:\n                    coldata = find_column_name(\n                        col, column_data[table]\n                    ) or find_column_name(col, column_data[\"general\"])\n                    if coldata:\n                        df = df.rename(columns={col: coldata[\"name\"]})\n                    else:\n                        added_cols[col] = col\n\n                url = components[table]\n                writer.cldf.add_component(components[table])\n                for col, coldata in added_cols.items():\n                    log.info(f\"Adding unspecified column: {col}\")\n                    writer.cldf.add_columns(components[table], coldata)\n            else:\n                for col in df.columns:\n                    coldata = find_column_name(col, column_data[\"general\"])\n                    if coldata:\n                        df = df.rename(columns={col: coldata[\"name\"]})\n                        added_cols[col] = coldata\n                    else:\n                        added_cols[col] = {\"name\": col.capitalize()}\n\n                url = f\"{table}.csv\"\n                cpt_data = {\"url\": url, \"tableSchema\": {\"columns\": []}}\n                writer.cldf.add_component(cpt_data)\n                for col, coldata in added_cols.items():\n                    log.info(f\"Adding unspecified column: {coldata['name']}\")\n                    writer.cldf.add_columns(url, coldata)\n                    df = df.rename(columns={col: coldata[\"name\"]})\n\n            for rec in df.to_dict(\"records\")[0:1]:\n                writer.objects[url].append(rec)\n        writer.cldf.write()\n        ds = writer.cldf\n    return ds\n</code></pre>"}]}