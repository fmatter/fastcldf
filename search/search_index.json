{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"fastcldf","text":"<p>Quickly create CLDF datasets.</p> <p> </p> <p>Main fastcldf module</p>"},{"location":"#fastcldf.create_cldf","title":"<code>create_cldf(tables, sources, spec=None, metadata=None, columns=None, foreignkeys=None, cldf_tables=None, validate=True)</code>","text":"<p>Creates a CLDF dataset.</p> <p>Parameters:</p> Name Type Description Default <code>tables</code> <code>dict</code> <p>A dict linking table names (\"languages\" etc.) to lists of records ([{\"id\": \"lg-1\", \"name\": \"Language 1\"} etc.]).</p> required <code>sources</code> <code>str</code> <p>A path to a .bib file</p> required <code>metadata</code> <p>A dict containing metadata about the dataset.</p> <code>None</code> <code>spec</code> <code>dict</code> <p>A dict representing a cldfbench spec</p> <code>None</code> <p>Returns:</p> Type Description <code>dataset</code> <p>A pycldf dataset, see here for details</p> Source code in <code>src/fastcldf/__init__.py</code> <pre><code>def create_cldf(\n    tables,\n    sources,\n    spec=None,\n    metadata=None,\n    columns=None,\n    foreignkeys=None,\n    cldf_tables=None,\n    validate=True,\n):\n    \"\"\"Creates a CLDF dataset.\n\n    Parameters\n    ----------\n    tables : dict\n      A dict linking table names (\"languages\" etc.) to\n      lists of records ([{\"id\": \"lg-1\", \"name\": \"Language 1\"} etc.]).\n    sources : str\n      A path to a .bib file\n    metadata: dict\n      A dict containing metadata about the dataset.\n    spec : dict\n      A dict representing a [cldfbench](https://github.com/cldf/cldfbench) spec\n    Returns\n    -------\n    pycldf.dataset\n        A pycldf dataset, see\n        [here](https://pycldf.readthedocs.io/en/latest/dataset.html)\n        for details\n    \"\"\"\n    metadata = metadata or {}\n    spec = spec or {\n        \"dir\": \"./cldf\",\n        \"module\": \"Generic\",\n        \"metadata_fname\": \"metadata.json\",\n    }\n    columns = columns or {}\n    foreignkeys = foreignkeys or {}\n    cldf_tables = cldf_tables or []\n    with CLDFWriter(CLDFSpec(**spec)) as writer:\n        for component in cldf_tables:\n            writer.cldf.add_component(component)\n        component_names, component_data, cldf_col_data = load_cldf_data()\n        for table, data in tables.items():\n            df = pd.DataFrame.from_dict(data).fillna(\"\")\n            if table in component_names:\n                url, df = process_native_table(\n                    table,\n                    df,\n                    component_names,\n                    cldf_col_data,\n                    writer,\n                    user_columns=columns.get(table, {}),\n                    foreignkeys=foreignkeys.get(table, {}),\n                )\n            else:\n                url, df = process_nonnative_table(\n                    table,\n                    df,\n                    cldf_col_data,\n                    writer,\n                    user_columns=columns.get(table, {}),\n                    foreignkeys=foreignkeys.get(table, {}),\n                )\n            for rec in df.to_dict(\"records\"):\n                writer.objects[url].append(rec)\n\n        source_path = Path(sources)\n        sources = None\n        if source_path.is_file():\n            sources = pybtex.database.parse_file(source_path)\n            writer.cldf.add_sources(\n                *[Source.from_entry(k, e) for k, e in sources.entries.items()]\n            )\n        writer.cldf.write()\n        ds = writer.cldf\n    if validate:\n        ds.validate()\n    return ds\n</code></pre>"},{"location":"#fastcldf.load_cldf","title":"<code>load_cldf(metadata_file)</code>","text":"<p>Load data from a CLDF dataset</p> <pre><code>Parameters\n</code></pre> <pre><code>metadata_file : str\n    A path to a `.json` metadata file.\n</code></pre> <pre><code>Returns\n</code></pre> <pre><code>data : dict\n    A dict where\n</code></pre> <ul> <li>e.g. <code>\"examples.csv\"</code> contains the example table records (list)</li> <li><code>\"metadata\"</code> contains the metadata (dict)</li> <li><code>\"sources\"</code> contains the bibfile (str)</li> </ul> Source code in <code>src/fastcldf/__init__.py</code> <pre><code>def load_cldf(metadata_file):\n    \"\"\"Load data from a CLDF dataset\n\n        Parameters\n        -----------\n        metadata_file : str\n            A path to a `.json` metadata file.\n\n        Returns\n        -------\n        data : dict\n            A dict where\n    * e.g. `\"examples.csv\"` contains the example table records (list)\n    * `\"metadata\"` contains the metadata (dict)\n    * `\"sources\"` contains the bibfile (str)\n    \"\"\"\n    ds = Dataset.from_metadata(metadata_file)\n    data = {}\n    for table in ds.tables:\n        res = []\n        for rec in ds.iter_rows(table.url):\n            res.append(rec)\n        data[str(table.url)] = res\n    data[\"metadata\"] = ds.metadata_dict\n    data[\"sources\"] = load(ds.bibpath)\n    return data\n</code></pre>"}]}